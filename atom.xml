<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kimz Index</title>
  
  <subtitle>Hey whatz up</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://poyhsiao.github.io/"/>
  <updated>2017-11-24T08:19:10.000Z</updated>
  <id>https://poyhsiao.github.io/</id>
  
  <author>
    <name>Kim Hsiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>好用的 Promise (bluebird) 與要注意的地方</title>
    <link href="https://poyhsiao.github.io/2017/11/20/%1C2017-11-20/"/>
    <id>https://poyhsiao.github.io/2017/11/20/2017-11-20/</id>
    <published>2017-11-20T07:52:29.000Z</published>
    <updated>2017-11-24T08:19:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>不是說，應該都可以用 async / await 方式作為新一代 js 操作的方式嗎，那跟 Promise 有什麼關係，反正全都 async / await 就好啦。不過，故事其實不是這麼簡單的，畢竟 async / await 其實是對 Promise 的封裝。而且，也不是大家的開發環境都是完全支援 async / await 的。所以，多多了解 Promise 還是非常重要的。</p><p>說到 js 的 Promise 大概就不得不提到 <a href="http://bluebirdjs.com/" title="bluebird" target="_blank" rel="external">bluebird</a> 吧，畢竟， <a href="http://bluebirdjs.com/" title="bluebird" target="_blank" rel="external">bluebird</a> 也算是 Promise 的完整整合方案了，也就是差不多都使用 <a href="http://bluebirdjs.com/" title="bluebird" target="_blank" rel="external">bluebird</a> 來取代原始的 Promise 所以，就來聊聊 <a href="http://bluebirdjs.com/" title="bluebird" target="_blank" rel="external">bluebird</a> 吧</p><a id="more"></a><h2 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h2><p>這部分也不多說了，反正基本上，我都會直接設定為：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">'bluebird'</span>)</div><div class="line"></div><div class="line">global.Promise = <span class="built_in">Promise</span></div></pre></td></tr></table></figure><p>也就是說，直接用 <a href="http://bluebirdjs.com/" title="bluebird" target="_blank" rel="external">bluebird</a> 取代原生的 Promise ，或是說，對於舊版本來說，就是讓它直接支援 Promise 吧，之後就不用管了</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>其實主要是要說明要注意的地方，大部分來說，都是在考慮使用 <code>.all</code>, <code>.props</code>, <code>.map</code>, <code>.each</code>, <code>.mapSeries</code>, <code>.filter</code>, <code>.reduce</code>, <code>.any</code>, <code>.some</code>, <code>.race</code></p><p>其實可以分幾個部分來說明</p><h3 id="all-props"><a href="#all-props" class="headerlink" title=".all, .props"></a><code>.all</code>, <code>.props</code></h3><p>先說明這兩個部分：</p><p>先看例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.all([</div><div class="line">    runPromise1(),</div><div class="line">    runPromise2(),</div><div class="line">    runPromise3()</div><div class="line">])</div><div class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.info(&#123; res &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">Promise</span>.props(&#123;</div><div class="line">    app1: runPromise1(),</div><div class="line">    app2: runPromise2(),</div><div class="line">    app3: runPromise3()</div><div class="line">&#125;)</div><div class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.info(&#123; res &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><ul><li>相同：</li></ul><ol><li>兩者都是批次執行多個 Promise function</li><li>皆會執行所給定的所有 Promise function</li><li>回傳值 <code>res</code> 都是執行的多個 Promise 執行結果的集合</li><li>皆為並行執行，也就是說，執行多個 Promise function 時，無關先後順序，所以 <strong><em>不應該</em></strong> 作為有先後相依相關的 Promise function 處理</li></ol><ul><li>相異：</li></ul><ol><li>給予的 <em>iterator</em> 不同， <code>.all</code> 是給予一個 <em>Array</em> 而 <code>.props</code> 是 <em>Object</em></li><li>最大的差別應該是產生的結果 <code>res</code> 格式不同，<code>.all</code> 是會產生 <em>Array</em> <code>[]</code> ，而 <code>.props</code> 則是產生 <em>Object</em> <code>{}</code></li></ol><ul><li>使用建議：</li></ul><ol><li>如果只想要快點完成 Promise 相關的動作，而且也未必一定要考慮產生的結果，使用 <code>.all</code> 寫法會比較簡單方便點</li><li>如果要考慮產生的結果 <code>res</code> 的值，而且會運用在接下來的操作中，則建議使用 <code>.props</code> ，畢竟產生的結果是 <em>Object</em> <code>{}</code> 格式，可以參考使用相關的 <em>key</em> 作為接下來處理的對象，可以減少可能發生的對應問題與錯誤</li><li>兩者皆是 <strong><em>並行執行</em></strong> 多個 Promise function，所以仍要注意，如果一次執行太多的 Promise function ，或是太複雜的 Promise function 時，可能會有記憶體不足或是過高的 system load 問題。不過每種機器到底建議要限制多少個可並行執行的 Promise function，則可能應該因時因地作為考量</li></ol><h3 id="each-map-mapSeries"><a href="#each-map-mapSeries" class="headerlink" title=".each, .map, .mapSeries"></a><code>.each</code>, <code>.map</code>, <code>.mapSeries</code></h3><p>先看例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.resolve(items)</div><div class="line">.each(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.info(&#123; item &#125;)</div><div class="line">    <span class="keyword">return</span> handler(item)</div><div class="line">&#125;)</div><div class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.info(&#123; res &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">const</span> concurrency = <span class="number">3</span></div><div class="line"></div><div class="line"><span class="built_in">Promise</span>.resolve(items)</div><div class="line">.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.info(&#123; item &#125;)</div><div class="line">    <span class="keyword">return</span> handler(item)</div><div class="line">&#125;, &#123; concurrency &#125;)</div><div class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.info(&#123; res &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">Promise</span>.resolve(items)</div><div class="line">.mapSeries(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.info(&#123; item &#125;)</div><div class="line">    <span class="keyword">return</span> handler(item)</div><div class="line">&#125;)</div><div class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.info(&#123; res &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><ul><li>相同：</li></ul><ol><li>傳入的項目 <code>items</code> 皆為 <em>Array</em> <code>[]</code></li><li>處理完成的項目 <code>res</code> 皆為 <em>Array</em> <code>[]</code></li><li>皆會在給定的 <code>items</code> <em>Array</em> 執行完成後，才會到 <code>res</code> 的結果</li></ol><ul><li>相異：</li></ul><ol><li><code>.each</code> 與 <code>.mapSeries</code> 相似，皆會依順序處理 <code>items</code> 項目</li><li><code>.map</code> 和 <code>.mapSeries</code> 產生的結果 <code>res</code> 皆是回傳 <code>.map</code>, <code>.mapSeries</code> 處理後的資料，而 <code>.each</code> 產生 <code>res</code> 則是原始給 <code>.each</code> 處理的 <code>items</code> 資料</li><li><code>.map</code> 可以多加一個 <code>concurrency</code> 參數，可以確保在執行 <code>.map</code> 時，同時並行處理的項目，當完成後，才處理接下來給定的 <code>items</code> 項目，直至所有給定的 <code>items</code> 處理完畢</li></ol><ul><li>使用建議：</li></ul><ol><li>除非在特定情況，必須要使用給定的值 (如，只是提供其他處理，並不考慮 <code>.each</code> 處理) 否則都 <strong><em>不</em></strong> 應該使用 <code>.each</code></li><li>如果要增加執行速度，建議使用 <code>.map</code> ，但是為了要確保系統穩定性，建議使用 <code>concurrency</code> 參數的設定</li><li>如果非常確定要確保 <strong>順序</strong> (如：排序相關)，則應該使用 <code>.mapSeries</code></li></ol><h3 id="map-filter-reduce"><a href="#map-filter-reduce" class="headerlink" title=".map, .filter, .reduce"></a><code>.map</code>, <code>.filter</code>, <code>.reduce</code></h3><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> concurrency = <span class="number">3</span></div><div class="line"><span class="keyword">const</span> initialNumber = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * map</span></div><div class="line"><span class="comment"> * /</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">Promise.resolve(items)</span></div><div class="line"><span class="comment">.map(item =&gt; &#123;</span></div><div class="line"><span class="comment">    console.info(item)</span></div><div class="line"><span class="comment">    return handler(item)</span></div><div class="line"><span class="comment">&#125;, &#123; concurrency &#125;)</span></div><div class="line"><span class="comment">.then(res =&gt; &#123;</span></div><div class="line"><span class="comment">    console.info(res)</span></div><div class="line"><span class="comment">&#125;)</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * filter</span></div><div class="line"><span class="comment"> * /</span></div><div class="line"><span class="comment">Promise.resolve(items)</span></div><div class="line"><span class="comment">.filter(item =&gt; &#123;</span></div><div class="line"><span class="comment">    if (checkCondition(item)) &#123;</span></div><div class="line"><span class="comment">        return handler(item)</span></div><div class="line"><span class="comment">    &#125;</span></div><div class="line"><span class="comment">&#125;, &#123; concurrency &#125;)</span></div><div class="line"><span class="comment">.then(res =&gt; &#123;</span></div><div class="line"><span class="comment">    console.info(res)</span></div><div class="line"><span class="comment">&#125;)</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * reduce</span></div><div class="line"><span class="comment"> * /</span></div><div class="line"><span class="comment">Promise.resolve(items)</span></div><div class="line"><span class="comment">.reduce(item =&gt; &#123;</span></div><div class="line"><span class="comment">    return handler(item)</span></div><div class="line"><span class="comment">&#125;, initialNumber)</span></div><div class="line"><span class="comment">.then(total =&gt; &#123;</span></div><div class="line"><span class="comment">    console.info(total)</span></div><div class="line"><span class="comment">&#125;)</span></div></pre></td></tr></table></figure><ul><li>相同：</li></ul><ol><li>皆是傳入 <em>Array</em></li><li>操作概念與原生 <code>[].map</code>，<code>[].filter</code> 與 <code>[].reduce</code> 概念相似</li><li><code>.map</code> 與 <code>.filter</code> 皆有 <code>concurrency</code> 設定可以提供</li></ol><ul><li>相異：</li></ul><ol><li><code>.map</code> 輸入時有多少個 <em>Array</em> item，則亦是回傳 <em>Array</em> 相同 item 數目</li><li><code>.filter</code> 輸入時有多少個 <em>Array</em> item，根據處理後，回傳的 <em>Array</em> item 數目可能會比較少或是為空 <em>Array</em></li><li><code>.reduce</code> 輸入時有多少 <em>Array</em> item，根據處理後，以及給定的 <code>initialNumber</code> 相加後的處理總數，如果沒有提供 <code>initalNumber</code>，則會回傳 <code>undefined</code></li><li><code>.map</code> 與 <code>.reduce</code> 基本上在標準 js 的使用來說，<code>reduce</code> 功能會比較強大，但是，在 Promise (bluebird) 中，則是完全不一樣的操作概念</li></ol><ul><li>使用建議：</li></ul><ol><li><code>.filter</code> 處理 <em>Array</em> 來說，更適合與可能輸入的 <em>Array element</em> 數目與輸出數目不相同情形 (如：部分使用 <code>.map</code> 操作時，不需要的資料會變成 <code>undefined</code>，而 <code>.filter</code> 則沒有此一問題)</li><li><code>.reduce</code>·更適合使用於單純計算綜合，如果沒有設定 <code>initialNumber</code> 時，則沒有任何有意義的回傳值</li></ol><h3 id="all，-some，-any，-race"><a href="#all，-some，-any，-race" class="headerlink" title=".all，.some，.any，.race"></a><code>.all</code>，<code>.some</code>，<code>.any</code>，<code>.race</code></h3><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.all([</div><div class="line">    runPromise1(),</div><div class="line">    runPromise2(),</div><div class="line">    runPromise3(),</div><div class="line">    runPromise4()</div><div class="line">])</div><div class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.info(&#123; res &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">const</span> count = <span class="number">2</span></div><div class="line"></div><div class="line"><span class="built_in">Promise</span>.some([</div><div class="line">    runPromise1(),</div><div class="line">    runPromise2(),</div><div class="line">    runPromise3(),</div><div class="line">    runPromise4()</div><div class="line">], count)</div><div class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.info(res)</div><div class="line">&#125;)</div><div class="line">.catch(<span class="built_in">Promise</span>.AggregateError, (err) =&gt; &#123;</div><div class="line">    err.forEach(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.error(error)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">Promise</span>.any([</div><div class="line">    runPromise1(),</div><div class="line">    runPromise2(),</div><div class="line">    runPromise3(),</div><div class="line">    runPromise4()</div><div class="line">])</div><div class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.info(res)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">Promise</span>.race([</div><div class="line">    runPromise1(),</div><div class="line">    runPromise2(),</div><div class="line">    runPromise3(),</div><div class="line">    runPromise4()</div><div class="line">], count)</div><div class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.info(res)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><ul><li>相同：</li></ul><ol><li>皆是傳入多個 (Array) 的 Promise / Iterable 項目</li></ol><ul><li>相異：</li></ul><ol><li><code>.all</code> 會執行所有給定的 Promise / Iterable 項目，而且，所有項目必須是執行成功的，並且，回傳值也是 <em>Array</em> 的格式</li><li><p><code>.some</code> 必須制定 <code>count</code> 的數值， <code>count</code> 數值必須代表最先完成 (無論成果或失敗 - resolve / reject) 的 Promise / Iterable 項目，回傳值為 <em>Array</em> ，長度應該與給定的 <code>count</code> 長度相同</p><p>如果想要擷取失敗 (不是過慢) 的項目，則可以使用 <code>Promise.AggregateError</code> 將所有的錯誤訊息整合、輸出</p></li><li><p><code>.any</code> 類似於使用 <code>.some</code> 方式，而 <code>count = 1</code> 的概念，而且回傳資料為單一項目，而不是 <code>.some</code> 的 Array 格式</p></li><li><code>.race</code> 與 <code>.any</code> 或是 <code>.some</code> 相似，但是， <code>.race</code> 只會擷取最快<em>成功</em>完成的一筆資料，作為回傳值</li></ol><ul><li>使用建議：</li></ul><ol><li>如果想要取得最早<em>成功</em>完成的項目，則應該考慮 <code>.race</code> 方式</li><li>如果只要取得最先完成的項目，無論成功與否，則可以考慮使用 <code>.any</code> 的方式</li><li>如果期望有些功能是成功，有些失敗，而且有設定最小必須成功的限制筆數，則應該使用 <code>.some</code> 方式</li><li>如果要確定每一個 Iterable 都必須成功，則應該使用 <code>.all</code> 或是 <code>.props</code> 方式</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;不是說，應該都可以用 async / await 方式作為新一代 js 操作的方式嗎，那跟 Promise 有什麼關係，反正全都 async / await 就好啦。不過，故事其實不是這麼簡單的，畢竟 async / await 其實是對 Promise 的封裝。而且，也不是大家的開發環境都是完全支援 async / await 的。所以，多多了解 Promise 還是非常重要的。&lt;/p&gt;&lt;p&gt;說到 js 的 Promise 大概就不得不提到 &lt;a href=&quot;http://bluebirdjs.com/&quot; title=&quot;bluebird&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bluebird&lt;/a&gt; 吧，畢竟， &lt;a href=&quot;http://bluebirdjs.com/&quot; title=&quot;bluebird&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bluebird&lt;/a&gt; 也算是 Promise 的完整整合方案了，也就是差不多都使用 &lt;a href=&quot;http://bluebirdjs.com/&quot; title=&quot;bluebird&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bluebird&lt;/a&gt; 來取代原始的 Promise 所以，就來聊聊 &lt;a href=&quot;http://bluebirdjs.com/&quot; title=&quot;bluebird&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bluebird&lt;/a&gt; 吧&lt;/p&gt;
    
    </summary>
    
      <category term="tech" scheme="https://poyhsiao.github.io/categories/tech/"/>
    
      <category term="nodejs" scheme="https://poyhsiao.github.io/categories/tech/nodejs/"/>
    
    
      <category term="nodejs" scheme="https://poyhsiao.github.io/tags/nodejs/"/>
    
      <category term="js" scheme="https://poyhsiao.github.io/tags/js/"/>
    
      <category term="promise" scheme="https://poyhsiao.github.io/tags/promise/"/>
    
      <category term="bluebird" scheme="https://poyhsiao.github.io/tags/bluebird/"/>
    
      <category term="心得" scheme="https://poyhsiao.github.io/tags/%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>多台 Mac 同步系統設定檔</title>
    <link href="https://poyhsiao.github.io/2017/11/02/%E5%A4%9A%E5%8F%B0%20Mac%20%E5%90%8C%E6%AD%A5%E7%B3%BB%E7%B5%B1%E8%A8%AD%E5%AE%9A%E6%AA%94/"/>
    <id>https://poyhsiao.github.io/2017/11/02/多台 Mac 同步系統設定檔/</id>
    <published>2017-11-02T03:40:19.000Z</published>
    <updated>2017-11-02T04:15:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>通常都是這樣吧，不知何時開始，早就已經習慣使用 Mac 作為主要的開發、使用機，使用 Linux 做為 server 或是次級桌面系統，漸漸也不習慣使用 Windows 的環境了；不過這一點也沒關係，反正有 command line interface (cli) 一點也沒問題，用起來倒是很順手。</p><p>唯一擔心的，就是多台電腦間，設定檔的同步問題，像是常會遇到的 browser, application setting 等問題，不過有些項目設定起來有點麻煩，所以至少，先同步一些常用的設定檔案</p><a id="more"></a><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>這次目的也算是很簡單，至少我要先同步 <code>.zshrc</code> (oh-my-zsh), <code>.vimrc</code> (vim) 以及 <code>.ssh</code> (ssh - folder) 等幾個項目，當然方法有幾個，例如，使用 git 之類的服務，或是使用同步檔案的服務，如 dropbox 之類的</p><p>經過懶人病作祟以及科技始終來自於惰性的座右銘，我決定使用 <a href="https://www.dropbox.com" title="Dropbox" target="_blank" rel="external">Dropbox</a> 來同步我的設定檔</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>其實與 git 比較起來，操作非常簡單，步驟如下：</p><ol><li>先在 <a href="https://www.dropbox.com" title="Dropbox" target="_blank" rel="external">Dropbox</a> 的同步資料夾中，建立一個準備同步的資料夾；我們先暫稱它為 dotfiles 好了</li><li>將要準備同步的檔案 / 資料夾先複製到這個要同步的資料夾中 (dotfiles)</li><li>刪除要同步的檔案 / 資料夾 (必先確定項目已經完成複製，並且已經同步完成)</li><li>重新把原本的項目 link 回原本項目應該在的位置</li></ol><p><img src="https://i.imgur.com/nLkiwYl.png" alt="screen 2017-11-02 11.54.19"></p><p><em>要注意的部分，為了要避免 unix-like 的系統中，檔案 / 資料夾前面有個 . ，代表是隱藏檔案 / 資料夾，為了確保在不同環境中，都可以看到這些檔案或是資料夾，複製過去 <a href="https://www.dropbox.com" title="Dropbox" target="_blank" rel="external">Dropbox</a> 時，還是最好把它另外命名為沒有前面有個 . 的一般正常檔案 / 資料夾</em></p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cp -rf ~/.ssh /Users/kimhsiao/Dropbox/dotfiles/ssh</div><div class="line">rm -rf ~/.ssh</div><div class="line">ln -sf /Users/kimhsiao/Dropbox/dotfiles/ssh ~/.ssh</div></pre></td></tr></table></figure><p>新電腦操作步驟：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rm -rf ~/.ssh</div><div class="line">ln -sf /Users/kimhsiao/Dropbox/dotfiles/ssh ~/.ssh</div></pre></td></tr></table></figure><p></p><p>如此一來，就可以開心的在不同電腦中同步你的設定檔了</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;通常都是這樣吧，不知何時開始，早就已經習慣使用 Mac 作為主要的開發、使用機，使用 Linux 做為 server 或是次級桌面系統，漸漸也不習慣使用 Windows 的環境了；不過這一點也沒關係，反正有 command line interface (cli) 一點也沒問題，用起來倒是很順手。&lt;/p&gt;&lt;p&gt;唯一擔心的，就是多台電腦間，設定檔的同步問題，像是常會遇到的 browser, application setting 等問題，不過有些項目設定起來有點麻煩，所以至少，先同步一些常用的設定檔案&lt;/p&gt;
    
    </summary>
    
      <category term="system" scheme="https://poyhsiao.github.io/categories/system/"/>
    
    
      <category term="sync" scheme="https://poyhsiao.github.io/tags/sync/"/>
    
      <category term="dropbox" scheme="https://poyhsiao.github.io/tags/dropbox/"/>
    
      <category term="mac" scheme="https://poyhsiao.github.io/tags/mac/"/>
    
      <category term="osx" scheme="https://poyhsiao.github.io/tags/osx/"/>
    
  </entry>
  
  <entry>
    <title>新鍵盤入手 - Logitech K380</title>
    <link href="https://poyhsiao.github.io/2017/06/30/2017-06-30/"/>
    <id>https://poyhsiao.github.io/2017/06/30/2017-06-30/</id>
    <published>2017-06-30T14:30:46.000Z</published>
    <updated>2017-06-30T17:48:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>哈哈，也沒什麼特別原因，就不過是逛了一下 Costco <code>萬惡的 costco 😄</code> 就順手買了 logitech 的 k380 鍵盤</p><p>原本只是隨意看看，沒想到觸感出奇地好，而且真的很小，但是每個按鍵大小都跟舒適，另位還支援了 Mac / Windows / ChromeOS / iOS / Android 等，幾乎所有的作業系統平台 <code>別問我有沒有 linux 啊，那個是小事情，反正大部分都是用 ssh 進去，就算是桌面環境要支援，倒也不是件難事</code> ，最要命的是，竟然只要 699，透過比價網發現，外面都要 799 啊，那當然就順手買啦，又得再提一次，真的是萬惡的 Costco ，沒事真的不要隨意去逛，太危險了！！</p><p>重點是，回來用起來到底如何吧，話說， logitech 就不用在這裡拍馬屁了，反正本來品質就沒話說，使用起來到底如何呢？！</p><a id="more"></a><h3 id="為什麼要賣這隻-K380-呢？"><a href="#為什麼要賣這隻-K380-呢？" class="headerlink" title="為什麼要賣這隻 K380 呢？"></a>為什麼要賣這隻 K380 呢？</h3><ol><li>未來因為工作需要，可能會遇到需要操作不同系統的環境，但是每個平台的鍵盤都不同，每次要習慣操作都需要浪費很多時間，整體的工作效率會明顯降低；所以，選擇一個好的鍵盤，是基本的維持工作成效的一個投資</li><li>會運用到藍牙鍵盤的機率不是這麼高，但是，一旦需要時，成本卻不低。現在的電視盒幾乎都是 andorid 系統的，如果想要在電視盒上做進階的操作，使用一般的 USB 鍵盤在機動性和操作性，都比使用藍牙鍵盤麻煩多了。所以外出選擇藍牙鍵盤，會比選擇 USB 鍵盤更有競爭力</li><li>K380 的大小以及重量適中，要攜帶出去並不費力。與其使用其他人的鍵盤，用自己習慣的工具，會更容易事半功倍</li></ol><h3 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h3><ol><li>按鍵的觸感和比例大小真的很棒，完全沒有什麼按起來會有不順手的地方</li><li>一次可以支援三套裝置。手邊沒有這麼多套作業系統可以玩，目前只用另外一台 iPhone 和 android 手機，就順便試試了，其實連線操作都很順手，而且切換也挺方便的</li><li>根據官方說法，電池可以使用兩年。我是不知道啦，反正才剛開始使用，真的要用到沒電才能說到底可以用多久囉</li><li>價錢真的算是蠻實惠的。雖說沒有必要非用藍牙鍵盤或是外接鍵盤不可 <code>畢竟目前其實幾乎都是使用筆電，很少使用到桌機</code>，不過想到這樣的大小，這樣的待機水平，其實是可以到處使用的</li><li>對於 Mac 的使用者來說，真的算貼心的。畢竟她的 command 鍵和 <code>alt</code> / <code>option</code> 鍵都是在熟悉的地方，不需要考慮像是購買一般的鍵盤，都是主要設計給 Windows 用戶使用的，所以，control、Win 鍵都沒問題，但是，拿到 Mac 上面使用，就會覺得一整個不順手</li><li>對於習慣使用 Mac 的筆電使用者來說，應該很習慣鍵盤上面沒有 <code>del</code> 這個鍵吧，要使用 <code>del</code> 功能，就是 <code>fn + back</code> 鍵囉，習慣也還好，只是就覺得有點可惜。不過 K380 把 <code>del</code> 鍵加回去了，所以對於 Windows 使用者來說是很應該的，不過對於 Mac 使用者來說，可就是加分啦</li></ol><p>不過，當然還是得說一下可惜的地方</p><h3 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h3><ol><li>fn 和 control 這兩個鍵，對於 Mac 使用者來說，剛好是相反的。也就是，一般的 Mac 鍵盤的 fn 鍵，是在最左下角，再來才是 control 鍵，這部分，可能是為了給 Windows 用戶習慣吧，這方面我沒有太想知道，也懶得查了</li><li>鍵盤後方沒辦法在墊高一點。其實 K380 已經算是非常貼心了，本身已經在背後做了防滑墊，鍵盤也有個基本的角度，已經算是很符合人體工學了。不過，少了個可以再站立的腳架，不免還是有點可惜</li><li>鍵盤不是純英文鍵盤。其實這也不太算是缺點啦，反正在台灣賣的鍵盤，要真的完全沒有 ㄅㄆㄇ 或是乾淨沒有倉頡字碼的鍵盤，真的不是這麼容易找，而且又在 Costco 買的，其實能選擇的更是少，但是還是得說一下，因為 K380 實在是貼心到爆炸，他除了有注音、倉頡，甚至還有另外一個不太確定是大易還是無蝦米的字根在上面 <code>到底是什麼，我也懶得查，反正根本用不到</code>，所以，小小乾淨簡潔的設計，因為在每個鍵上面，都添加了四種符號，看起來真的有點破壞美感，算是小小可惜</li><li>沒有手持裝置的立架。這也不算是個缺點，因為本來就有個 K480 啊，他就是有立架的那種；只是，既然是可以支援手持裝置，沒有立架，在使用上是有點不這麼方便；如果可以簡單的拖拉出一個小地盤，那就太棒棒了</li></ol><p>整體來說，真的算是個很棒、很超值的藍牙鍵盤</p><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>好的，其實真的沒有什麼問題好說的，操作起來完全不會覺得彆扭。只不過，哪有這麼開心的，對於我來說， <code>fn</code> 和 <code>control</code> 兩個鍵的位置不同，其實並不會太困擾我，畢竟使用的機率也沒有這麼多，反正之後都會用 K380 當作我習慣使用的鍵盤，但是，另一個問題，反而是比較重要的…</p><h3 id="鎖定-Macbook-家族-notebook-的螢幕"><a href="#鎖定-Macbook-家族-notebook-的螢幕" class="headerlink" title="鎖定 Macbook 家族 notebook 的螢幕"></a>鎖定 Macbook 家族 notebook 的螢幕</h3><p>好啦，我相信，沒有這麼多人回有這方面的困擾，畢竟可以使用滑鼠移往熱點的方式達成。但是，習慣使用鍵盤的來說，多點擊幾次滑鼠，或是手離開鍵盤這件事，就是一件中斷操作與思考的一個行為；就連螢幕上鎖這件事情也是一樣。而且，滑鼠位置移往熱點來說，真的會不小心觸及到，又會再次中斷工作與思路</p><p>原本鎖定螢幕的方式很簡單：</p><ul><li>有光碟機的版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;command&gt; + &lt;shift&gt; + &lt;eject&gt;</div></pre></td></tr></table></figure><ul><li>新一代的系統，沒有光碟機的版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;command&gt; + &lt;shift&gt; + &lt;power&gt;</div></pre></td></tr></table></figure><p>好啦，遇到 K380 就沒輒啦，畢竟鍵盤上面沒有 <code>eject</code> 或是 <code>power</code> 鍵，想要鎖螢幕就不容易了吧！！</p><p>還好在 Mac 中，總是有辦法解決 <code>就跟 linux 一樣</code>，因為 Mac 有一個內建的小機器人 <strong><em>Automator</em></strong> ，這個東西真的是佛心來的，只要覺得 Mac 在哪方面用起來不是這麼順手，想要有更好的操作經驗，這個 <strong><em>Automator</em></strong> 提供了簡易的圖形化介面，或是高級的 applescript 方式，就可以很簡單的幫助你了。</p><p>至於 <strong><em>Automator</em></strong> 的操作介紹，以及 <strong><em>Applescript</em></strong> 的語法，完全不是我們要介紹的重點，這次只想要分享，如何讓 Mac 也可以使用類似於 Windows 使用 <code>Win</code> + <code>L</code> 的方式，鎖定螢幕</p><h3 id="自行設定替代的螢幕鎖定方式"><a href="#自行設定替代的螢幕鎖定方式" class="headerlink" title="自行設定替代的螢幕鎖定方式"></a>自行設定替代的螢幕鎖定方式</h3><p>原文可以參考 <a href="https://apple.stackexchange.com/questions/135728/using-applescript-to-lock-screen" title="參考來源" target="_blank" rel="external">這裡</a> 的最佳解說明</p><p>但是項目太複雜了，而且還會在狀態列上面多一個圖示，對於螢幕本來就不大，而且已經有很多圖示在上面的我來說，怎麼看怎麼不開心，所以就使用了其他方式</p><ul><li>開啟 <strong><em>Automator</em></strong></li><li>新增一個 <strong>服務</strong></li></ul><p><img src="http://i.imgur.com/FdG0IH4.png" alt="新增服務"></p><ul><li>新增一個 <strong><em>Applescript</em></strong></li><li>拖曳項目到右邊的流程</li><li>服務接收：選擇 <em>沒有輸入項目</em></li><li>script 內容填入：</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">tell</span> <span class="built_in">application</span> <span class="string">"Finder"</span> <span class="keyword">to</span> sleep</div></pre></td></tr></table></figure><p><img src="http://i.imgur.com/ZGnl0iY.jpg" alt="項目流程圖"></p><ul><li>存檔，可以考慮設為檔名「<strong>Lock screen</strong>」</li><li>前往 <strong><em>系統偏好設定</em></strong></li><li>選擇 <strong><em>鍵盤</em></strong> -&gt; <strong><em>快速鍵</em></strong> -&gt; <strong><em>服務</em></strong></li><li>找到並勾選剛才設定的服務名稱 <code>以 Lock Screen 為例</code></li><li>點選項目右邊的，設定快速鍵</li></ul><p><img src="http://i.imgur.com/LaAMKjt.jpg" alt="設定服務與快速鍵"></p><ul><li>設定好快速鍵後，就完成新的螢幕鎖定功能了，也可以使用喜歡的螢幕鎖定快速鍵方式，在 K380 上開心的使用螢幕鎖定的功能了</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;哈哈，也沒什麼特別原因，就不過是逛了一下 Costco &lt;code&gt;萬惡的 costco 😄&lt;/code&gt; 就順手買了 logitech 的 k380 鍵盤&lt;/p&gt;&lt;p&gt;原本只是隨意看看，沒想到觸感出奇地好，而且真的很小，但是每個按鍵大小都跟舒適，另位還支援了 Mac / Windows / ChromeOS / iOS / Android 等，幾乎所有的作業系統平台 &lt;code&gt;別問我有沒有 linux 啊，那個是小事情，反正大部分都是用 ssh 進去，就算是桌面環境要支援，倒也不是件難事&lt;/code&gt; ，最要命的是，竟然只要 699，透過比價網發現，外面都要 799 啊，那當然就順手買啦，又得再提一次，真的是萬惡的 Costco ，沒事真的不要隨意去逛，太危險了！！&lt;/p&gt;&lt;p&gt;重點是，回來用起來到底如何吧，話說， logitech 就不用在這裡拍馬屁了，反正本來品質就沒話說，使用起來到底如何呢？！&lt;/p&gt;
    
    </summary>
    
      <category term="life" scheme="https://poyhsiao.github.io/categories/life/"/>
    
    
      <category term="logitech" scheme="https://poyhsiao.github.io/tags/logitech/"/>
    
      <category term="bluetooth" scheme="https://poyhsiao.github.io/tags/bluetooth/"/>
    
      <category term="costco" scheme="https://poyhsiao.github.io/tags/costco/"/>
    
      <category term="applescript" scheme="https://poyhsiao.github.io/tags/applescript/"/>
    
  </entry>
  
  <entry>
    <title>想要做一個簡單的書籤管理平台</title>
    <link href="https://poyhsiao.github.io/2017/06/26/2017-06-26-1/"/>
    <id>https://poyhsiao.github.io/2017/06/26/2017-06-26-1/</id>
    <published>2017-06-26T04:53:07.000Z</published>
    <updated>2017-06-26T05:15:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/w5vMcFq.jpg" alt="江南好風光"></p><h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>其實早就覺得目前的書籤管理工具都不太好，然而，每次使用 <a href="https://evernote.com/intl/zh-tw/" title="Evernote" target="_blank" rel="external">evernote</a> 或是 <a href="https://www.onenote.com" title="One Note" target="_blank" rel="external">onenote</a> 都覺得綁手綁腳，真的想要有個簡單的管理書籤的平台，該倒的也差不多都倒光了，好吧，那就乾脆自己動手做一個吧</p><a id="more"></a><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>目前想到的功能應該有以下幾個：</p><ol><li>快速放入網址建立書籤</li><li>項目可以自訂 title、說明、tags 等項目（選填）</li><li>呈現方式回有簡單的網頁內容（類似於 <a href="https://evernote.com/intl/zh-tw/" title="Evernote" target="_blank" rel="external">evernote</a> 的 <em>clearly</em> 模式）</li><li>具有搜尋功能，可以搜尋: 網址、title、說明、標籤、簡單網頁內容</li><li>可以分享出去（系統自動產生網址）</li><li>搜尋結果，可以匯出成 html、json 格式</li><li>可以完整匯出、匯入和備份</li><li>基本還是要有會員概念</li></ol><p>目前想到的大概就是這些項目，未來應該要有的功能應該可以增加：</p><ol><li>app</li><li>browser extension</li><li>項目分析等的後台功能</li><li>平台化、交流等的功能</li></ol><p>基本的想法大概就是這樣吧，我想困難度不高，期待可以快速完成，順便熟悉一些新技術。未來可能第一版完成後，會先丟一版作為 open source project</p><p>Anyway, good luck</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/w5vMcFq.jpg&quot; alt=&quot;江南好風光&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;起源&quot;&gt;&lt;a href=&quot;#起源&quot; class=&quot;headerlink&quot; title=&quot;起源&quot;&gt;&lt;/a&gt;起源&lt;/h2&gt;&lt;p&gt;其實早就覺得目前的書籤管理工具都不太好，然而，每次使用 &lt;a href=&quot;https://evernote.com/intl/zh-tw/&quot; title=&quot;Evernote&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;evernote&lt;/a&gt; 或是 &lt;a href=&quot;https://www.onenote.com&quot; title=&quot;One Note&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;onenote&lt;/a&gt; 都覺得綁手綁腳，真的想要有個簡單的管理書籤的平台，該倒的也差不多都倒光了，好吧，那就乾脆自己動手做一個吧&lt;/p&gt;
    
    </summary>
    
      <category term="project" scheme="https://poyhsiao.github.io/categories/project/"/>
    
    
      <category term="html" scheme="https://poyhsiao.github.io/tags/html/"/>
    
      <category term="bookmark" scheme="https://poyhsiao.github.io/tags/bookmark/"/>
    
      <category term="evernote" scheme="https://poyhsiao.github.io/tags/evernote/"/>
    
      <category term="onenote" scheme="https://poyhsiao.github.io/tags/onenote/"/>
    
      <category term="sharing" scheme="https://poyhsiao.github.io/tags/sharing/"/>
    
      <category term="export" scheme="https://poyhsiao.github.io/tags/export/"/>
    
      <category term="json" scheme="https://poyhsiao.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>有了 git hooks 其實已經解決了大部分的工作</title>
    <link href="https://poyhsiao.github.io/2017/06/26/2017-06-26/"/>
    <id>https://poyhsiao.github.io/2017/06/26/2017-06-26/</id>
    <published>2017-06-25T16:00:29.000Z</published>
    <updated>2017-06-25T16:48:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>這幾天一直在想，其實 <a href="https://hexo.io" target="_blank" rel="external">hexo</a> 已經超級方便了，反正可以開心的寫作，也可以輕鬆地維護控管版本</p><p>但是，總是覺得不是這麼順手，畢竟，好像每次寫完文章後，就讓他自動 deploy 到遠端服務上，當然是件很簡單的事情。不過，大部分時候，就是因為這麼簡單，所以根本忘記要 commit 甚至 push 上去</p><p>所以就開始胡思亂想啦，是不是應該用 CI <code>continues integration</code> 的方式，甚至可以 CD <code>continues delivery</code> 當然，有沒有達成這麼完美的目的倒是未必，更重要的概念，是可以盡量畢其功於一役</p><p>所以，可以考慮執行的方式有以下幾點：</p><ul><li>寫個 script，在 deploy 之前，先 commit code</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ ./bin/deploy.sh</div><div class="line"></div><div class="line"><span class="comment">#... 要先做一大堆事情，如 git add 等等一大堆</span></div><div class="line"></div><div class="line">$ git commit</div></pre></td></tr></table></figure><ul><li>先 commit code，然後再 deploy 相關的 code</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ... 先做一大堆事情</span></div><div class="line"></div><div class="line">$ git commit</div><div class="line"></div><div class="line">$ ./bin/deploy.sh</div></pre></td></tr></table></figure><ul><li>乾脆把這些事情丟到 jenkins 上面幫忙</li></ul><p>以上幾點來看，第三點算是真的殺雞用牛刀了，不但要有一個 jenkins 的服務，還要寫一些 script，甚至想說從 <strong>A</strong> git repository 到 <strong>B (github.io ?)</strong> 這種動作，真的有違常理。所以用 jenkins 真的不太直覺方便</p><p>再來，先 commit 再 deploy，這部分來說，其實對於 <a href="https://hexo.io" target="_blank" rel="external">hexo</a> 來說，deploy 其實是包括了 generate -&gt; deploy ，所以萬一 generate code 時，有發生任何錯誤，那也就是改壞了、有 bug 了。這樣的 commit 似乎也不好</p><p>所以，比較好的概念應該是類似於第一種。先 generate code，如果沒問題的話，就 commit，如果有問題，那就該啊～～</p><p>因此，應該考慮使用第一種方式，就是先 generate code，再 commit code 吧。不過（世上就是這麼多，不過…）這樣還是有點麻煩，畢竟正如同前面所提到的，如果要我打這麼多 command，那麼就一點也不符合懶的原則了</p><p>經過幾個小時偷玩 Jenkins 後，順便 Google 了一下，其實是可以考慮使用 [git hooks] 的功能</p><p>原本還以為是什麼外掛呢，原來他早就已經存在於 .git 的資料夾中，這要簡單的修改就可以使用了，而且是最簡單的 shell script 而已，只要吧 *.sample 後面的 sample 副檔名，就可以直接使用啦</p><p>先說一下我的想法和做法吧：</p><ul><li>commit 前，就先讓 <a href="https://hexo.io" target="_blank" rel="external">hexo</a> generate html 吧，順便看看有沒有問題</li><li>commit code</li><li>commit 後，就直接把剛才 generate 出來的 html，deploy 到指定的目的地吧</li></ul><p>既然概念這麼簡單，就直接說要怎麼做了</p><ul><li>修改一下 <code>./git/hooks/pre-commit.sample</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"></div><div class="line"><span class="built_in">exec</span> ./bin/generate.sh</div></pre></td></tr></table></figure><ul><li>重新修改檔名，把後面的 <code>.sample</code> 拿掉，就會變成 <code>pre-commit</code> 這個檔名。待會 commit code 之前，就會自動執行剛才所執行的 <code>generate.sh</code> 這個 script 啦</li><li>另一部分，也可以有 <code>post-commit</code> 這個檔案，就是 commit 完成後要執行的動作，如果沒有這個檔案，那就手動生一個吧</li><li>其他還有不同的功能和處罰時機不同的功能</li></ul><p>如此一來，我就可以在 commit code 完成後，不但產生了目的的 html ，又可以在 commit 完成後，直接 deploy html 頁面到目標的地方</p><p>這麼說來，除了需要在檢視是否功能有誤時，無法直接操作外，其他的部分，就可以全自動把 code commit，又可以達成 deploy 的目標。真的算是一舉數得啊！！</p><p>相關 git hooks 資料，可以看看 <a href="https://git-scm.com/book/zh-tw/v1/Git-客製化-Git-Hooks" title="git hooks" target="_blank" rel="external">這裡</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;這幾天一直在想，其實 &lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo&lt;/a&gt; 已經超級方便了，反正可以開心的寫作，也可以輕鬆地維護控管版本&lt;/p&gt;&lt;p&gt;但是，總是覺得不是這麼順手，畢竟，好像每次寫完
      
    
    </summary>
    
      <category term="tech" scheme="https://poyhsiao.github.io/categories/tech/"/>
    
    
      <category term="git" scheme="https://poyhsiao.github.io/tags/git/"/>
    
      <category term="deploy" scheme="https://poyhsiao.github.io/tags/deploy/"/>
    
      <category term="jenkins" scheme="https://poyhsiao.github.io/tags/jenkins/"/>
    
      <category term="ci" scheme="https://poyhsiao.github.io/tags/ci/"/>
    
      <category term="cd" scheme="https://poyhsiao.github.io/tags/cd/"/>
    
  </entry>
  
  <entry>
    <title>使用 js 建構機器學習核心</title>
    <link href="https://poyhsiao.github.io/2017/06/23/2017-06-23/"/>
    <id>https://poyhsiao.github.io/2017/06/23/2017-06-23/</id>
    <published>2017-06-23T01:28:41.000Z</published>
    <updated>2017-06-23T03:31:02.000Z</updated>
    
    <content type="html"><![CDATA[<iframe src="http://bit.ly/2rXwjq0" width="100%" height="300"></iframe><p>Evernote link: <a href="http://bit.ly/2rXwjq0" title="使用 js 建構機器學習核心" target="_blank" rel="external">here</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe src=&quot;http://bit.ly/2rXwjq0&quot; width=&quot;100%&quot; height=&quot;300&quot;&gt;&lt;/iframe&gt;&lt;p&gt;Evernote link: &lt;a href=&quot;http://bit.ly/2rXwjq0&quot; title=&quot;使用 js 建構機器學習
      
    
    </summary>
    
      <category term="參考" scheme="https://poyhsiao.github.io/categories/%E5%8F%83%E8%80%83/"/>
    
      <category term="學習" scheme="https://poyhsiao.github.io/categories/%E5%8F%83%E8%80%83/%E5%AD%B8%E7%BF%92/"/>
    
      <category term="範例" scheme="https://poyhsiao.github.io/categories/%E5%8F%83%E8%80%83/%E5%AD%B8%E7%BF%92/%E7%AF%84%E4%BE%8B/"/>
    
      <category term="evernote" scheme="https://poyhsiao.github.io/categories/%E5%8F%83%E8%80%83/%E5%AD%B8%E7%BF%92/%E7%AF%84%E4%BE%8B/evernote/"/>
    
    
      <category term="js" scheme="https://poyhsiao.github.io/tags/js/"/>
    
      <category term="machine learning" scheme="https://poyhsiao.github.io/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>成長就是先遇到阻礙</title>
    <link href="https://poyhsiao.github.io/2017/06/22/2017-06-22/"/>
    <id>https://poyhsiao.github.io/2017/06/22/2017-06-22/</id>
    <published>2017-06-22T09:58:47.000Z</published>
    <updated>2017-06-22T10:35:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>這應該算是一直以來的常態了，只要專心一致想要做一件事情，就會開始有些小的阻礙，例如：</p><ul><li><p>活動邀約變多</p><p><em>平常沒什麼人在理的，可以專心做些事情，但是一旦下定決心做些事情時，就會開始有很多人找，不見得是壞事，但是，就是會把原本規劃好的時程打亂</em></p></li><li><p>設備開始出現問題</p><p><em>這也是常見的問題與影響，概念就是，很多原本根本沒想到會出問題的軟、硬件，會出現不可期望的問題</em></p></li><li><p>想太多、規劃太複雜、動作太慢</p><p><em>這可能是強迫症的症狀吧，只要有新項目出現，就會想要規劃一個很完整的系統，反而讓整個行程時間變得難以掌控</em></p></li><li><p>行為項目發散</p><p><em>這種問題，應該與上述的問題相類似，會因為中間遇到問題，就會分神去解決，以為要完成主要的項目，必須先解決其中這些問題，然而，很多時候，其實這些問題根本沒有這麼重要，而是應該先有個折衷，為達目的先不擇手段</em></p></li></ul><p>是的，最近準備開始的新專案，又是開始遇到這樣的問題，這些項目，幾乎都不是別人造成的問題，而是自己的問題。</p><p>因為會遇到這些項目的阻礙，所以時常就會讓項目胎死腹中，而根本還沒開始執行，或是連雛形都還沒完成就結束了。</p><p>所以，是該好好調整自己，把心靜下來，好好想清楚目標、項目、施行步驟才是，有想法就應該挽起袖子好好執行，就如同最近看到很棒的演說分享，也跟大家分享一下！！</p><iframe src="https://www.facebook.com/plugins/video.php?href=https%3A%2F%2Fwww.facebook.com%2Fntnu1946%2Fvideos%2F1384772361559702%2F&show_text=0&width=560" width="560" height="315" style="border:none;overflow:hidden" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen></iframe><p><a href="https://www.facebook.com/ntnu1946/videos/1384772361559702/" title="激勵人心的師大畢典演講影片及致詞全文 - 林藝" target="_blank" rel="external">影片連結</a><br><a href="https://www.facebook.com/photo.php?fbid=10210260006917359&amp;set=a.1843423206099.2097124.1256168621&amp;type=3&amp;theater" title="激勵人心的師大畢典演講影片及致詞全文 - 林藝" target="_blank" rel="external">原文連結</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;這應該算是一直以來的常態了，只要專心一致想要做一件事情，就會開始有些小的阻礙，例如：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;活動邀約變多&lt;/p&gt;&lt;p&gt;&lt;em&gt;平常沒什麼人在理的，可以專心做些事情，但是一旦下定決心做些事情時，就會開始有很多人找，不見得是壞事，但是，就是會把原本規劃好的
      
    
    </summary>
    
      <category term="life" scheme="https://poyhsiao.github.io/categories/life/"/>
    
    
      <category term="life" scheme="https://poyhsiao.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>項目最佳化</title>
    <link href="https://poyhsiao.github.io/2017/06/21/2017-06-21/"/>
    <id>https://poyhsiao.github.io/2017/06/21/2017-06-21/</id>
    <published>2017-06-21T09:38:44.000Z</published>
    <updated>2017-06-21T10:00:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>倒也不算是什麼了不起的調整，反正靜態網頁就是要越最佳化越好嘛，例如</p><ul><li>圖片要更小一點</li><li>html 有多難讀就多難讀</li><li>js 能多小就多小，code 越簡單越好</li></ul><p>這樣，才可以加快讀取速度嘛</p><p><img src="http://i.imgur.com/mn1u0Gb.jpg" alt="開朵小花兒"></p><a id="more"></a><p>所以，這次也把我的 <a href="https://hexo.io" title="hexo" target="_blank" rel="external">hexo</a> 更小化了一點，另外把原本消失的 <em>categories</em> 和 <em>tags</em> 頁面也產出了 (ps. 我是參考 <a href="https://github.com/iissnan/hexo-theme-next/issues/51" title="消失的 tags 和 categories 頁面" target="_blank" rel="external">這裡</a> 啦) <code>別問我 about 頁面如何，反正現在還沒想到要怎麼弄，先不管了...</code></p><p>當然另外，為了有更好的 RWD 效果，也做了小小的修改，總之，在手機上可不能太難看啊，畢竟手機用戶才是大宗</p><p>至於分享的部分，當然就簡單實用 <a href="https://www.shareaholic.com" target="_blank" rel="external">shareaholic</a> 囉，先求有再求好，跟何況已經夠好了，暫時不需要調整了</p><p>也就是說，這個 <a href="http://poyhsiao.giikr.info" title="Kimz Index" target="_blank" rel="external">blog</a> 暫時功能也算是完成了！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;倒也不算是什麼了不起的調整，反正靜態網頁就是要越最佳化越好嘛，例如&lt;/p&gt;&lt;ul&gt;&lt;li&gt;圖片要更小一點&lt;/li&gt;&lt;li&gt;html 有多難讀就多難讀&lt;/li&gt;&lt;li&gt;js 能多小就多小，code 越簡單越好&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;這樣，才可以加快讀取速度嘛&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/mn1u0Gb.jpg&quot; alt=&quot;開朵小花兒&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="html" scheme="https://poyhsiao.github.io/categories/html/"/>
    
      <category term="hexo" scheme="https://poyhsiao.github.io/categories/html/hexo/"/>
    
    
      <category term="js" scheme="https://poyhsiao.github.io/tags/js/"/>
    
      <category term="hexo" scheme="https://poyhsiao.github.io/tags/hexo/"/>
    
      <category term="optimize" scheme="https://poyhsiao.github.io/tags/optimize/"/>
    
      <category term="html" scheme="https://poyhsiao.github.io/tags/html/"/>
    
      <category term="css" scheme="https://poyhsiao.github.io/tags/css/"/>
    
      <category term="RWD" scheme="https://poyhsiao.github.io/tags/RWD/"/>
    
  </entry>
  
  <entry>
    <title>偷看程式碼真的有很大的益處</title>
    <link href="https://poyhsiao.github.io/2017/06/20/2017-06-20-1/"/>
    <id>https://poyhsiao.github.io/2017/06/20/2017-06-20-1/</id>
    <published>2017-06-20T10:08:03.000Z</published>
    <updated>2017-06-21T09:54:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>應該大家都知道 <a href="https://hexo.io" title="hexo" target="_blank" rel="external">hexo</a> 了吧，倒也不是什麼新的、了不起的新應用技術了，總之，我也是這幾天才開始玩</p><p>其中的原因不外有以下五點：</p><ul><li>是該開始寫點東西了，每次都會忘記紀錄些項目，就連 <a href="https://evernote.com" title="evernote" target="_blank" rel="external">evernote</a> 上的東西也越來越少翻出來看了</li><li>使用 <strong><em>Markdown</em></strong> 語言寫東西，是感覺更像是在寫簡單的文字，純文字的寫法，跟讓人有感</li><li>越來越懶得去架設一些服務，雖然一開始概念都是練習技術，但是很多時候都半途而廢，或是機器調整後，就沒有再也不想維護了</li><li><a href="http://zh.mweb.im" title="MWeb" target="_blank" rel="external">MWeb</a> 真的超好用的，又美觀、又方便、又支援各種 blog 和圖床的功能，有在寫 <strong><em>Markdown</em></strong> 的夥伴們，一定要花點錢買套正版的來玩玩喔 <code>這也是為什麼用 linux / windows 很不舒服的原因之一</code></li><li>總是要留點東西下來，FB / instagram 或是其他的 social network 平台都很好，但是說要真的留下、查看東西都很困難，除了可以彌補一下空虛心靈討拍拍以外，就沒有什麼太大的需求了… <code>也是時間該戒 FB 的時候了</code></li></ul><p>好啦，言歸正傳，這次到底有什麼收穫，先不說要怎麼安裝 <a href="https://hexo.io" title="hexo" target="_blank" rel="external">hexo</a> 或是有什麼特別的外掛了</p><a id="more"></a><p>這次的學習來源是因為一個佈景主題啟發的，這個佈景主題就是 <a href="https://github.com/iTimeTraveler/hexo-theme-hiero" title="hexo theme - hiero" target="_blank" rel="external">hiero</a>，挑選他的原因，也不過就是看起來很清爽，感覺也挺符合一般檢視的 fu 啦</p><p><img src="http://i.imgur.com/BEj0Ia7.png" alt="Hiero theme"><br><em>看起來挺清爽的吧</em></p><p>不過，真的發現趣味的是，在設定 <code>_config.yml</code> 時發現的…</p><p>一下找到了對岸的許多網站分析、統計相關的服務，重點是，其實作者都整理分析的挺好的…</p><h2 id="項目"><a href="#項目" class="headerlink" title="項目"></a>項目</h2><h3 id="Social-network-links"><a href="#Social-network-links" class="headerlink" title="Social network links"></a>Social network links</h3><ul><li><a href="https://github.com" title="github" target="_blank" rel="external">Github</a></li><li><a href="http://weibo.com" title="新浪微博" target="_blank" rel="external">Weibo</a></li><li><a href="https://twitter.com" title="Twitter" target="_blank" rel="external">Twitter</a></li><li><a href="https://facebook.com" title="Facebook - FB" target="_blank" rel="external">Facebook</a></li><li><a href="https://plus.google.com" title="Google plus - G+" target="_blank" rel="external">G+</a></li><li><a href="https://www.instagram.com" title="Instagram - IG" target="_blank" rel="external">Instagram</a></li><li><a href="https://www.pinterest.com" title="Pinterest" target="_blank" rel="external">Pinterest</a></li><li><a href="http://flickr.com" target="_blank" rel="external">Flickr</a></li><li>聯絡 Email</li></ul><p><em>這些都可以設為自己相關的 social network links，當然，你要自己再另外加也可以</em></p><h3 id="Discussion-Guest-book"><a href="#Discussion-Guest-book" class="headerlink" title="Discussion (Guest book)"></a>Discussion (Guest book)</h3><ul><li><a href="https://gentie.163.com/" target="_blank" rel="external">网易云跟贴</a></li><li><a href="http://duoshuo.com" title="多說，好像已經失效了" target="_blank" rel="external">多說</a> <code>好像已經失效了</code></li><li><a href="https://disqus.com" title="Disqus" target="_blank" rel="external">Disqus</a></li><li><a href="https://livere.com" title="livere - 來必力" target="_blank" rel="external">livere</a> <code>中文翻譯為來必力，似乎是個韓國來的服務</code></li><li><a href="http://www.uyan.cc" title="友言：一个专业的网站社交评论系统" target="_blank" rel="external">uyan</a></li><li><a href="http://www.wumii.org" title="匿名的聊天群組" target="_blank" rel="external">wumii</a></li></ul><h3 id="Webmaster-站長工具"><a href="#Webmaster-站長工具" class="headerlink" title="Webmaster (站長工具)"></a>Webmaster (站長工具)</h3><ul><li><a href="https://www.google.com/webmasters/" target="_blank" rel="external">Google webmaster</a></li><li><a href="http://zhanzhang.baidu.com" target="_blank" rel="external">百度 站長平台</a></li><li><a href="http://zhanzhang.so.com" target="_blank" rel="external">360 站長平台</a></li></ul><h3 id="網站分析工具"><a href="#網站分析工具" class="headerlink" title="網站分析工具"></a>網站分析工具</h3><ul><li><a href="https://www.google.com/intl/zh-TW/analytics/features/index.html" target="_blank" rel="external">Google Analytics</a> <code>GA</code></li><li><a href="http://get.gaug.es" target="_blank" rel="external">Gauges</a> <code>七天免費試用</code></li><li><a href="https://tongji.baidu.com/web/welcome/login" target="_blank" rel="external">百度统计</a></li><li><a href="http://ta.qq.com" target="_blank" rel="external">腾讯分析</a></li><li><a href="http://busuanzi.ibruce.info" target="_blank" rel="external">不蒜子</a> <code>極簡網頁計數器，免註冊</code></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><a href="http://www.cnzz.com/o_index.php" target="_blank" rel="external">CNZZ</a> <code>數據專家，很優秀的網站瀏覽分析平台</code></li></ul><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>現在網路這麼發達，想要擁有一些網站統計、觀察的工具非常多，不過，如果想要進軍大陸市場是，很多項目無法使用，也就是，其實都得使用大陸市場的工具，以目前看來，這幾個項目，是進軍大陸互聯網 (尤其是傳統網站) 來說，最基本的幾個項目</p><p>別說的好像是在台灣的 SEO 做的多好，網站分析的多透徹，甚至社群行銷的多優秀，如果沒有了 Google, FB 這些工具，其實到了中國大陸，可能都無法負荷當地市場所需</p><p>再次重申一次，根據台灣目前所剩無幾的資源以及優勢，對於大陸還是有這麼一點點的小小利多，如果沒有好好把握住最後的一點點機會，那真的未來什麼都沒了，無論是技術以及文化，都必須要更加緊密合作才可以走出困境！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;應該大家都知道 &lt;a href=&quot;https://hexo.io&quot; title=&quot;hexo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo&lt;/a&gt; 了吧，倒也不是什麼新的、了不起的新應用技術了，總之，我也是這幾天才開始玩&lt;/p&gt;&lt;p&gt;其中的原因不外有以下五點：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;是該開始寫點東西了，每次都會忘記紀錄些項目，就連 &lt;a href=&quot;https://evernote.com&quot; title=&quot;evernote&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;evernote&lt;/a&gt; 上的東西也越來越少翻出來看了&lt;/li&gt;&lt;li&gt;使用 &lt;strong&gt;&lt;em&gt;Markdown&lt;/em&gt;&lt;/strong&gt; 語言寫東西，是感覺更像是在寫簡單的文字，純文字的寫法，跟讓人有感&lt;/li&gt;&lt;li&gt;越來越懶得去架設一些服務，雖然一開始概念都是練習技術，但是很多時候都半途而廢，或是機器調整後，就沒有再也不想維護了&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zh.mweb.im&quot; title=&quot;MWeb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MWeb&lt;/a&gt; 真的超好用的，又美觀、又方便、又支援各種 blog 和圖床的功能，有在寫 &lt;strong&gt;&lt;em&gt;Markdown&lt;/em&gt;&lt;/strong&gt; 的夥伴們，一定要花點錢買套正版的來玩玩喔 &lt;code&gt;這也是為什麼用 linux / windows 很不舒服的原因之一&lt;/code&gt;&lt;/li&gt;&lt;li&gt;總是要留點東西下來，FB / instagram 或是其他的 social network 平台都很好，但是說要真的留下、查看東西都很困難，除了可以彌補一下空虛心靈討拍拍以外，就沒有什麼太大的需求了… &lt;code&gt;也是時間該戒 FB 的時候了&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;好啦，言歸正傳，這次到底有什麼收穫，先不說要怎麼安裝 &lt;a href=&quot;https://hexo.io&quot; title=&quot;hexo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo&lt;/a&gt; 或是有什麼特別的外掛了&lt;/p&gt;
    
    </summary>
    
      <category term="life" scheme="https://poyhsiao.github.io/categories/life/"/>
    
    
      <category term="hexo" scheme="https://poyhsiao.github.io/tags/hexo/"/>
    
      <category term="markdown" scheme="https://poyhsiao.github.io/tags/markdown/"/>
    
      <category term="mweb" scheme="https://poyhsiao.github.io/tags/mweb/"/>
    
  </entry>
  
  <entry>
    <title>很久沒有用 windows 了</title>
    <link href="https://poyhsiao.github.io/2017/06/20/2017-06-20/"/>
    <id>https://poyhsiao.github.io/2017/06/20/2017-06-20/</id>
    <published>2017-06-20T04:02:10.000Z</published>
    <updated>2017-06-20T05:23:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="很久沒有用-windows-了"><a href="#很久沒有用-windows-了" class="headerlink" title="很久沒有用 windows 了"></a>很久沒有用 windows 了</h1><p>也不知道到底有多久沒有用 windows，大約是 win7 之後，就不熟悉了</p><p>最近拿到一台 NB，原本想說安裝 mint linux 來寫程式就好了，不過發現，相對於 Mac OSX 來說，其實 Linux 沒什麼質量比較高的軟件。例如，想要有個好用的 Markdown editor，就沒有像是 Mac 的 MWeb 合理與好用…另外，習慣使用的拼音輸入（繁體），也不像是 Mac 本身就已經內建了 <code>話說，好像 windows 也沒有內建，不過至少可以使用</code> <a href="https://www.google.com/intl/zh-CN/ime/pinyin/features.html" target="_blank" rel="external">google 拼音輸入法</a></p><p>所以這兩天也就索性把 linux 重新安裝回 windows 吧，沒想到很快就出現另人懷念的畫面了</p><p><img src="http://i.imgur.com/ItjSCTM.jpg" alt="3"><br>好啦，我也完全不想看懂這是什麼</p><p>我想最麻煩的應該會是以下幾個部分了</p><ul><li>安裝 driver <code>有電腦、有 windows 10 就很迷人了，其他不強求</code></li><li>windows update <code>無盡的等待</code></li><li>鍵盤位置 <code>這可能是短期之內，無論是使用任何作業系統，只要遇到鍵盤就會發生不習慣的問題</code></li><li>其他快速鍵習慣操作與設定</li></ul><p>anyway，祝我好運吧，真不知道要適應多久了！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;很久沒有用-windows-了&quot;&gt;&lt;a href=&quot;#很久沒有用-windows-了&quot; class=&quot;headerlink&quot; title=&quot;很久沒有用 windows 了&quot;&gt;&lt;/a&gt;很久沒有用 windows 了&lt;/h1&gt;&lt;p&gt;也不知道到底有多久沒有用 windo
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>測試文章</title>
    <link href="https://poyhsiao.github.io/2017/06/02/2017-06-02/"/>
    <id>https://poyhsiao.github.io/2017/06/02/2017-06-02/</id>
    <published>2017-06-02T09:50:20.000Z</published>
    <updated>2017-06-25T16:00:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="這是一篇測試文章"><a href="#這是一篇測試文章" class="headerlink" title="這是一篇測試文章"></a>這是一篇測試文章</h1><p>就是測試</p><p>別介意啊！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;這是一篇測試文章&quot;&gt;&lt;a href=&quot;#這是一篇測試文章&quot; class=&quot;headerlink&quot; title=&quot;這是一篇測試文章&quot;&gt;&lt;/a&gt;這是一篇測試文章&lt;/h1&gt;&lt;p&gt;就是測試&lt;/p&gt;&lt;p&gt;別介意啊！！&lt;/p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://poyhsiao.github.io/2017/06/02/hello-world/"/>
    <id>https://poyhsiao.github.io/2017/06/02/hello-world/</id>
    <published>2017-06-02T08:11:45.000Z</published>
    <updated>2017-06-02T08:11:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
